// Brushless motor library
// copyright Alexandre Iooss, 2017-2018
// Please see README.txt for license information

#include "SinArray.h"
#include "Arduino.h"

#ifdef SIN_GENERATOR

unsigned int sin_array[N_VALUES];

#else

const int PROGMEM sin_array[N_VALUES] = {
0x0000, 0x0192, 0x0324, 0x04B6, 0x0647, 0x07D9, 0x096A, 0x0AFB, 0x0C8B, 0x0E1B, 0x0FAB, 0x1139, 0x12C7, 0x1455, 0x15E1, 0x176D, 
0x18F8, 0x1A82, 0x1C0B, 0x1D93, 0x1F19, 0x209F, 0x2223, 0x23A6, 0x2527, 0x26A7, 0x2826, 0x29A3, 0x2B1E, 0x2C98, 0x2E10, 0x2F86, 
0x30FB, 0x326D, 0x33DE, 0x354D, 0x36B9, 0x3824, 0x398C, 0x3AF2, 0x3C56, 0x3DB7, 0x3F16, 0x4073, 0x41CD, 0x4325, 0x447A, 0x45CC, 
0x471C, 0x4869, 0x49B3, 0x4AFA, 0x4C3F, 0x4D80, 0x4EBF, 0x4FFA, 0x5133, 0x5268, 0x539A, 0x54C9, 0x55F4, 0x571D, 0x5842, 0x5963, 
0x5A81, 0x5B9C, 0x5CB3, 0x5DC6, 0x5ED6, 0x5FE2, 0x60EB, 0x61F0, 0x62F1, 0x63EE, 0x64E7, 0x65DD, 0x66CE, 0x67BC, 0x68A5, 0x698B, 
0x6A6C, 0x6B4A, 0x6C23, 0x6CF8, 0x6DC9, 0x6E95, 0x6F5E, 0x7022, 0x70E1, 0x719D, 0x7254, 0x7306, 0x73B5, 0x745E, 0x7503, 0x75A4, 
0x7640, 0x76D8, 0x776B, 0x77F9, 0x7883, 0x7908, 0x7989, 0x7A04, 0x7A7C, 0x7AEE, 0x7B5C, 0x7BC4, 0x7C29, 0x7C88, 0x7CE2, 0x7D38, 
0x7D89, 0x7DD5, 0x7E1C, 0x7E5E, 0x7E9C, 0x7ED4, 0x7F08, 0x7F37, 0x7F61, 0x7F86, 0x7FA6, 0x7FC1, 0x7FD7, 0x7FE8, 0x7FF5, 0x7FFC, 
0x7FFF, 0x7FFC, 0x7FF5, 0x7FE8, 0x7FD7, 0x7FC1, 0x7FA6, 0x7F86, 0x7F61, 0x7F37, 0x7F08, 0x7ED4, 0x7E9C, 0x7E5E, 0x7E1C, 0x7DD5, 
0x7D89, 0x7D38, 0x7CE2, 0x7C88, 0x7C29, 0x7BC4, 0x7B5C, 0x7AEE, 0x7A7C, 0x7A04, 0x7989, 0x7908, 0x7883, 0x77F9, 0x776B, 0x76D8, 
0x7640, 0x75A4, 0x7503, 0x745E, 0x73B5, 0x7306, 0x7254, 0x719D, 0x70E1, 0x7022, 0x6F5E, 0x6E95, 0x6DC9, 0x6CF8, 0x6C23, 0x6B4A, 
0x6A6C, 0x698B, 0x68A5, 0x67BC, 0x66CE, 0x65DD, 0x64E7, 0x63EE, 0x62F1, 0x61F0, 0x60EB, 0x5FE2, 0x5ED6, 0x5DC6, 0x5CB3, 0x5B9C, 
0x5A81, 0x5963, 0x5842, 0x571D, 0x55F4, 0x54C9, 0x539A, 0x5268, 0x5133, 0x4FFA, 0x4EBF, 0x4D80, 0x4C3F, 0x4AFA, 0x49B3, 0x4869, 
0x471C, 0x45CC, 0x447A, 0x4325, 0x41CD, 0x4073, 0x3F16, 0x3DB7, 0x3C56, 0x3AF2, 0x398C, 0x3824, 0x36B9, 0x354D, 0x33DE, 0x326D, 
0x30FB, 0x2F86, 0x2E10, 0x2C98, 0x2B1E, 0x29A3, 0x2826, 0x26A7, 0x2527, 0x23A6, 0x2223, 0x209F, 0x1F19, 0x1D93, 0x1C0B, 0x1A82, 
0x18F8, 0x176D, 0x15E1, 0x1455, 0x12C7, 0x1139, 0x0FAB, 0x0E1B, 0x0C8B, 0x0AFB, 0x096A, 0x07D9, 0x0647, 0x04B6, 0x0324, 0x0192, 
0x0000, 0xFE6E, 0xFCDC, 0xFB4A, 0xF9B9, 0xF827, 0xF696, 0xF505, 0xF375, 0xF1E5, 0xF055, 0xEEC7, 0xED39, 0xEBAB, 0xEA1F, 0xE893, 
0xE708, 0xE57E, 0xE3F5, 0xE26D, 0xE0E7, 0xDF61, 0xDDDD, 0xDC5A, 0xDAD9, 0xD959, 0xD7DA, 0xD65D, 0xD4E2, 0xD368, 0xD1F0, 0xD07A, 
0xCF05, 0xCD93, 0xCC22, 0xCAB3, 0xC947, 0xC7DC, 0xC674, 0xC50E, 0xC3AA, 0xC249, 0xC0EA, 0xBF8D, 0xBE33, 0xBCDB, 0xBB86, 0xBA34, 
0xB8E4, 0xB797, 0xB64D, 0xB506, 0xB3C1, 0xB280, 0xB141, 0xB006, 0xAECD, 0xAD98, 0xAC66, 0xAB37, 0xAA0C, 0xA8E3, 0xA7BE, 0xA69D, 
0xA57F, 0xA464, 0xA34D, 0xA23A, 0xA12A, 0xA01E, 0x9F15, 0x9E10, 0x9D0F, 0x9C12, 0x9B19, 0x9A23, 0x9932, 0x9844, 0x975B, 0x9675, 
0x9594, 0x94B6, 0x93DD, 0x9308, 0x9237, 0x916B, 0x90A2, 0x8FDE, 0x8F1F, 0x8E63, 0x8DAC, 0x8CFA, 0x8C4B, 0x8BA2, 0x8AFD, 0x8A5C, 
0x89C0, 0x8928, 0x8895, 0x8807, 0x877D, 0x86F8, 0x8677, 0x85FC, 0x8584, 0x8512, 0x84A4, 0x843C, 0x83D7, 0x8378, 0x831E, 0x82C8, 
0x8277, 0x822B, 0x81E4, 0x81A2, 0x8164, 0x812C, 0x80F8, 0x80C9, 0x809F, 0x807A, 0x805A, 0x803F, 0x8029, 0x8018, 0x800B, 0x8004, 
0x8001, 0x8004, 0x800B, 0x8018, 0x8029, 0x803F, 0x805A, 0x807A, 0x809F, 0x80C9, 0x80F8, 0x812C, 0x8164, 0x81A2, 0x81E4, 0x822B, 
0x8277, 0x82C8, 0x831E, 0x8378, 0x83D7, 0x843C, 0x84A4, 0x8512, 0x8584, 0x85FC, 0x8677, 0x86F8, 0x877D, 0x8807, 0x8895, 0x8928, 
0x89C0, 0x8A5C, 0x8AFD, 0x8BA2, 0x8C4B, 0x8CFA, 0x8DAC, 0x8E63, 0x8F1F, 0x8FDE, 0x90A2, 0x916B, 0x9237, 0x9308, 0x93DD, 0x94B6, 
0x9594, 0x9675, 0x975B, 0x9844, 0x9932, 0x9A23, 0x9B19, 0x9C12, 0x9D0F, 0x9E10, 0x9F15, 0xA01E, 0xA12A, 0xA23A, 0xA34D, 0xA464, 
0xA57F, 0xA69D, 0xA7BE, 0xA8E3, 0xAA0C, 0xAB37, 0xAC66, 0xAD98, 0xAECD, 0xB006, 0xB141, 0xB280, 0xB3C1, 0xB506, 0xB64D, 0xB797, 
0xB8E4, 0xBA34, 0xBB86, 0xBCDB, 0xBE33, 0xBF8D, 0xC0EA, 0xC249, 0xC3AA, 0xC50E, 0xC674, 0xC7DC, 0xC947, 0xCAB3, 0xCC22, 0xCD93, 
0xCF05, 0xD07A, 0xD1F0, 0xD368, 0xD4E2, 0xD65D, 0xD7DA, 0xD959, 0xDAD9, 0xDC5A, 0xDDDD, 0xDF61, 0xE0E7, 0xE26D, 0xE3F5, 0xE57E, 
0xE708, 0xE893, 0xEA1F, 0xEBAB, 0xED39, 0xEEC7, 0xF055, 0xF1E5, 0xF375, 0xF505, 0xF696, 0xF827, 0xF9B9, 0xFB4A, 0xFCDC, 0xFE6E };

#endif

void SinArray::generate()
{
#ifdef SIN_GENERATOR
  // Generate sin array
  Serial.println();
  Serial.println("const int PROGMEM sin_array[N_VALUES] = {");
  for (int i = 0; i < N_VALUES; i++)
  {
    if((i % 16) == 0) Serial.println();
    sin_array[i] = sin(2. * M_PI * i / (double)N_VALUES) * STORE_TYPE_RANGE;
    Serial.print("0x");
    if(sin_array[i] <= 0x0FFF) Serial.print("0");
    if(sin_array[i] <= 0x00FF) Serial.print("0");
    if(sin_array[i] <= 0x000F) Serial.print("0");
    Serial.print(sin_array[i], HEX);
    if(i==N_VALUES-1) Serial.print(" };");
    else Serial.print(", ");
  }
#endif
}

double SinArray::getSinByOffset(int offset)
{
  // Offset must be positive and between  and N_VALUES-1
  offset = offset % N_VALUES;
  if (offset < 0) offset = N_VALUES + offset;
  return sin_array[offset] / (double)STORE_TYPE_RANGE;
}

double SinArray::getSinDegree(double a)
{
  int offset = (a * N_VALUES) / 360;
  return getSinByOffset(offset);
}

double SinArray::getSin(double r)
{
  int offset = (r * N_VALUES) / (2. * M_PI);
  return getSinByOffset(offset);
}
